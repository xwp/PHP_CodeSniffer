#!/usr/bin/env php
<?php
/**
 * Apply PHP_CodeSniffer to changes currently uncommitted to the current repo (currently Git or SVN)
 * or to a diff between two previous commits (revisions). This can be used as a pre-commit hook as well.
 *
 * PHP version 5
 *
 * @category  PHP
 * @package   PHP_CodeSniffer
 * @author    Jack Bates <ms419@freezone.co.uk>
 * @author    Greg Sherwood <gsherwood@squiz.net>
 * @author    Weston Ruter <weston@x-team.com>
 * @copyright 2006-2013 Squiz Pty Ltd (ABN 77 084 670 600), X-Company Pty Ltd
 * @license   https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence
 * @link      http://pear.php.net/package/PHP_CodeSniffer
 */

if (is_file(dirname(__FILE__).'/../CodeSniffer/CLI.php') === true) {
    include_once dirname(__FILE__).'/../CodeSniffer/CLI.php';
} else {
    include_once 'PHP/CodeSniffer/CLI.php';
}

define('PHP_CODESNIFFER_SVNLOOK', '/usr/bin/svnlook');

/**
 * Installation instructions for SVN
 * Add the following line to your repofolder/hooks/pre-commit on the svn server
 * /path/to/PHPCS/scripts/phpcs-patch "$1" -t "$2" --standard=WordPress >&2 || exit 1
 *
 * Installation instructions for GIT
 * You can just symlink the file to repofolder/hooks/pre-commit
 * cd /path/to/repofolder/.git/hooks && ln -s /path/to/PHPCS/scripts/phpcs-patch pre-commit
 *
 * Usage of this as a standalone check
 * For SVN:
 * /path/to/phpcs-patch --standard=WordPress /path/to/working/dir -r 21 --local
 * /path/to/phpcs-patch --standard=WordPress /path/to/working/dir -c 21 --local
 *
 * For GIT:
 * /path/to/phpcs-patch --standard=WordPress /path/to/working/dir -r HEAD^
 * /path/to/phpcs-patch --standard=WordPress /path/to/working/dir -r foobar:HEAD^
 */

/**
 * A class to process command line options.
 *
 * @category  PHP
 * @package   PHP_CodeSniffer
 * @author    Jack Bates <ms419@freezone.co.uk>
 * @author    Greg Sherwood <gsherwood@squiz.net>
 * @author    Weston Ruter <weston@x-team.com>
 * @author    Shady Sharaf <shady@x-team.com>
 * @copyright 2006-2012 Squiz Pty Ltd (ABN 77 084 670 600), X-Company Pty Ltd
 * @license   https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence
 * @version   Release: @package_version@
 * @link      http://pear.php.net/package/PHP_CodeSniffer
 */
class PHP_CodeSniffer_Patch_CLI extends PHP_CodeSniffer_CLI
{

    /**
     * Changes lines in each file, via diff
     * @var array
     */
    public $changed_lines = array();

    /**
     * Repository root, used with git
     * @var array
     */
    public $repo_root = array();

    /**
     * Get a list of default values for all possible command line arguments.
     *
     * @return array
     */
    public function getDefaults()
    {
        $defaults = parent::getDefaults();

        $defaults['vcsType'] = null;
        $vcs_tests = array(
            'svn' => function () {
                exec( 'svn info 2>&1', $output, $retval );
                return $retval === 0;
            },
            'git' => function () {
                exec( 'git status 2>&1', $output, $retval );
                return $retval === 0;
            },
        );
        foreach ( $vcs_tests as $vcs_type => $vcs_test ) {
            if ( call_user_func( $vcs_test ) ) {
                $defaults['vcsType'] = $vcs_type;
                break;
            }
        }

        $defaults['vcsArgs'] = array();
        $defaults['direct-call'] = false; // Defaults to NO, I'M A HOOK

        //$defaults['staged'] = true;
        return $defaults;

    }//end getDefaults()


    /**
     * Processes an unknown command line argument.
     *
     * All unknown args are sent to  commands.
     *
     * @param string $arg    The command line argument.
     * @param int    $pos    The position of the argument on the command line.
     * @param array  $values An array of values determined from CLI args.
     *
     * @return array The updated CLI values.
     * @see getCommandLineValues()
     */
    public function processUnknownArgument($arg, $pos, $values)
    {
        if ( $arg === '--git' ) {
            $values['vcsType'] = 'git';
        }
        else if ( $arg === '--svn' ) {
            $values['vcsType'] = 'svn';
        }
        else if ( $arg == '--local' ) {
            $values['direct-call'] = true;
        }
        else {
            $values['vcsArgs'][] = $arg;
        }
        return $values;

    }//end processUnknownArgument()

    /**
     * Runs PHP_CodeSniffer over files are directories.
     *
     * @param array $values An array of values determined from CLI args.
     *
     * @return int The number of error and warning messages shown.
     * @see getCommandLineValues()
     */
    public function process($values=array())
    {
        if (empty($values) === true) {
            $values = parent::getCommandLineValues();
        }

        $this->repo_root  = trim( $this->executeCommand( 'pwd' ) );

        $paths = array();

        if (empty($values['vcsType'])) {
            printf( 'Unknown VCS' . PHP_EOL );
            exit(1);
        }

        // 1. Get changed files
        // --------------------
        
        if ($values['vcsType'] === 'git') {
            // Access objects in the current index (staged but not yet commited).
            // Do we have a commit [range] ?
            $args = $values['vcsArgs'];
            $rev = '--staged';
            if ( false !== ( $_r = array_search( '-r', $args ) ) ) {
                $rev = str_replace( ':', ' ', $args[$_r+1] );
            }
            $contents = $this->executeCommand( sprintf(
                'git diff --name-status %s',
                $rev
                ) );
        }
        else if ($values['vcsType'] === 'svn') {
            // If supplied a transaction, or running on server, use svnlook, to handle svn:pre-commit ( on svn server )
            if ( in_array( '-t', $values['vcsArgs'] ) || ! $values['direct-call'] ) {
                $command = sprintf(
                    'svnlook changed %s',
                    implode(' ', $values['vcsArgs'])
                );
            }
            // else, use svn diff, to handle local execution
            else {
                $args = array_splice( $values['vcsArgs'], 1 );
                if ( 
                    false !== ( $_r = array_search( '-r', $args ) ) 
                    && 
                    strpos( $args[$_r+1], ':' ) === false
                    ) {
                    $args[$_r+1] = $args[$_r+1] . ':HEAD';
                }
                elseif ( false === ( $_r = array_search( '-r', $args ) )  ) {
                    $args[] = '-r';
                    $info = preg_match('#Revision: (\d+)#', `svn info -r 'HEAD' | grep 'Revision: '`, $matches ) ? $matches[1] : null;
                    $args[] = $info*1-1 . ':' . 'HEAD';
                }
                $command = sprintf(
                    'svn diff %s --summarize',
                    implode( ' ', $args )                    
                    );
                
            }
            $contents = $this->executeCommand( $command );
        }
        else {
            printf( 'Unknown VCS of type "%s".' . PHP_EOL, $values['vcsType'] );
            exit(1);
        }

        // Filter changed files, add to paths to check
        foreach( preg_split("/\v|\n/", $contents, -1, PREG_SPLIT_NO_EMPTY) as $line ) {
            // Skip deleted lines
            if ( preg_match( '/^D.*/', $line ) ) {
                continue;
            }
            // Drop the four characters representing the action which precede the path on each line.
            if ( $values['vcsType'] == 'git' ) {
                $pattern = '/^\S+\s+/';
            }
            elseif ( $values['vcsType'] == 'svn' ) {
                $pattern = '/^.{4}/';
            }
            $paths[] = trim( 
                preg_replace( 
                    $pattern, 
                    '', 
                    str_replace(
                        $this->repo_root.'/', 
                        '', 
                        $line)
                    )
                );
        }

        $values['standard'] = $this->validateStandard($values['standard']);
        if (PHP_CodeSniffer::isInstalledStandard($values['standard']) === false) {
            // They didn't select a valid coding standard, so help them
            // out by letting them know which standards are installed.
            printf( 'ERROR: the "%s" coding standard is not installed.' . PHP_EOL, $values['standard'] );
            $this->printInstalledStandards();
            exit(2);
        }
 
        $phpcs = new PHP_CodeSniffer(
            $values['verbosity'],
            $values['tabWidth'],
            $values['encoding']
        );

        // Set file extensions if they were specified. Otherwise,
        // let PHP_CodeSniffer decide on the defaults.
        if (empty($values['extensions']) === false) {
            $phpcs->setAllowedFileExtensions($values['extensions']);
        }

        // Set ignore patterns if they were specified.
        if (empty($values['ignored']) === false) {
            $phpcs->setIgnorePatterns($values['ignored']);
        }

        // Set some convenience member vars.
        if ($values['errorSeverity'] === null) {
            $this->errorSeverity = PHPCS_DEFAULT_ERROR_SEV;
        } else {
            $this->errorSeverity = $values['errorSeverity'];
        }

        if ($values['warningSeverity'] === null) {
            $this->warningSeverity = PHPCS_DEFAULT_WARN_SEV;
        } else {
            $this->warningSeverity = $values['warningSeverity'];
        }

        // Initialize PHP_CodeSniffer listeners but don't process any files.
        $phpcs->setCli($this);
        $phpcs->process(array(), $values['standard'], $values['sniffs']);

        // 2. Get content of each changed file
        // -----------------------------------
        
        foreach ($paths as $path) {
            // No need to process folders as each changed file is checked.
            if (substr($path, -1) === '/') {
                continue;
            }

            // We need to check ignore rules ourselves because they are
            // not checked when processing a single file.
            if ($phpcs->shouldProcessFile($path, dirname($path)) === false) {
                continue;
            }


            if ( $values['vcsType'] == 'git' ) {
                // Get file from a certain revision, fallback to STAGED if not provided
                $args = $values['vcsArgs'];
                $rev = ''; // Fallback to current staged file
                if ( false !== ( $_r = array_search( '-r', $args ) ) ) {
                    $rev = str_replace( ':', ' ', $args[$_r+1] );
                }
                $command = sprintf( 
                    'cd %s && git show %s:%s',
                    $this->repo_root, 
                    $rev, // Empty rev means staged file
                    $path
                    );
                $contents = $this->executeCommand( $command );
            }
            elseif ( $values['vcsType'] == 'svn' ) {
                // Transactions happen on svn server, not local 
                if ( ! $values['direct-call'] ) {
                    // Get the contents of each file, as it would be after this transaction.
                    $command = sprintf(
                        PHP_CODESNIFFER_SVNLOOK . ' cat %s %s',
                        implode(' ', $values['vcsArgs']),
                        $path
                        );
                    $contents = $this->executeCommand( $command );
                }
                else { // locally invoked
                    // We're cd'ing to the dir anyway, no need to pass the directory
                    $args = array_splice( $values['vcsArgs'], 1 );
                    if ( 
                        false !== ( $_r = array_search( '-r', $args ) ) 
                        && 
                        strpos( $args[$_r+1], ':' ) !== false
                        ) {
                        $args[$_r+1] = preg_match( '#(.*):#', $args[$_r+1], $matches ) ? $matches[1] : null;
                    }
                    // If no -r is passed, check the HEAD~1 revision
                    elseif ( false === ( $_r = array_search( '-r', $args ) )  ) {
                        $args[] = '-r';
                        $info = preg_match('#Revision: (\d+)#', `cd {$this->repo_root} && svn info -r 'HEAD' | grep 'Revision: '`, $matches ) ? $matches[1] : null;
                        $args[] = $info*1-1;
                    }
                    // We need the file at that certain revision, -c here doesn't fit, replace with -r
                    $args = str_replace( '-c', '-r', implode( ' ', $args ) );
                    $command = sprintf(
                        'cd %s && svn cat %s %s',
                        $this->repo_root,
                        $args,
                        str_replace($this->repo_root.'/', '', $path)
                        );
                    $contents = $this->executeCommand( $command );
                }
            }

            $phpcs->processFile( $path, $contents );

        }//end foreach

        return $this->printErrorReport(
            $phpcs,
            $values['reports'],
            $values['showSources'],
            $values['reportFile'],
            $values['reportWidth']
        );

    }//end process()

    /**
     * Process VCS diff, and extract changes lines
     * @param  string $path Path to file within repo
     * @param  string $vcs  VCS type (git|svn)
     * @return array        Array of changed lines
     */
    public function process_diff() {

        $values = parent::getCommandLineValues();
        $vcs = $values['vcsType'];

        if ( $vcs == 'git' ) {
            $args = $values['vcsArgs'];
            // Check staged files if no revision is passed
            $rev = '--staged';
            if ( false !== ( $_r = array_search( '-r', $args ) ) ) {
                $rev = $args[$_r+1];
                if ( false !== strpos( $rev, ':' ) ) {
                    $rev = str_replace(':', ' ', $rev);
                }
                $rev = $rev . ' --';
            }
            $command = sprintf(
                'cd %s && git diff -U0 %s',
                $this->repo_root,
                $rev
                );
        }
        elseif ( $vcs == 'svn' ) {
            $args = array_splice( $values['vcsArgs'], 1 );
            // remove transaction info from args, svn diff doesn't like it, and it is not needed anyway
            if ( false !== ( $_t = array_search( '-t', $args ) ) ) {
                unset($args[$_t]);
                unset($args[$_t+1]);
            }
            $command = sprintf( 
                'cd %s && svn diff %s --no-diff-deleted --diff-cmd diff -x -U0', 
                $this->repo_root,
                implode( ' ', $args )
                );
        }

        $diffs = $this->executeCommand( $command, true );

        $files = array();
        $file  = '';

        $scope = 0;
        $scope_start = 0;
        foreach ( $diffs as $i => $line ) {
            if ( $vcs == 'git' && preg_match( '#diff --git a/(\S+)#', $line, $matches ) ) {
                $file = $matches[1];
                $files[$file] = array();
            }
            if ( $vcs == 'svn' && preg_match( '#^\+\+\+ (\S+)#', $line, $matches ) ) {
                $file = str_replace( $this->repo_root . '/', '', $matches[1] );
                $files[$file] = array();
            }
            elseif ( preg_match( '#^@@#', $line ) ) {
                $scope = $i;
                $scope_start = preg_match( '#^@@.*\+(\d+)#', $line, $matches ) ? $matches[1] : null;
                continue;
            }
            elseif ( preg_match( '#^\+[^\+]#', $line ) ) {
                $files[$file][] = $scope_start + ( $i - $scope - 1 );
                $scope_start += 1;
                continue;
            }
            elseif ( preg_match( '#\ No newline at end of file"#', $line ) ) {
                continue;
            }
            $scope_start -= 1;
        }

        return $files;

    }


    /**
     * Prints out the usage information for this script.
     *
     * @return void
     */
    public function printUsage()
    {
        parent::printUsage();

        // svn look:
        // -r [--revision] ARG      : specify revision number ARG
        // -t [--transaction] ARG   : specify transaction name ARG
//        Transaction ID only makes sense for transactions that are not yet
//        committed, i.e. during commit - when files are already on the server
//        side, but not in repository yet.
//
//            So, this transaction ID only valid when pre-commit hook is called, after
//        commit is completed transaction is deleted and instead new revision in
//        repository appears.

        echo PHP_EOL;
        echo '    Each additional argument is passed to the current repo\'s VCS tool'.PHP_EOL;
        echo '    The report is printed on standard output,'.PHP_EOL;
        echo '    however Subversion displays only standard error to the user, so in a'.PHP_EOL;
        echo '    pre-commit hook, this script should be invoked as follows:'.PHP_EOL;
        echo PHP_EOL;
        echo '    '.basename($_SERVER['argv'][0]).' ... "$REPOS" -t "$TXN" >&2 || exit 1'.PHP_EOL;

    }//end printUsage()

    /**
     * Prints the error report for the run.
     *
     * Note that this function may actually print multiple reports
     * as the user may have specified a number of output formats.
     *
     * @param PHP_CodeSniffer $phpcs       The PHP_CodeSniffer object containing
     *                                     the errors.
     * @param array           $reports     A list of reports to print.
     * @param bool            $showSources TRUE if report should show error sources
     *                                     (not used by all reports).
     * @param string          $reportFile  A default file to log report output to.
     * @param int             $reportWidth How wide the screen reports should be.
     *
     * @return int The number of error and warning messages shown.
     */
    public function printErrorReport(
        PHP_CodeSniffer $phpcs,
        $reports,
        $showSources,
        $reportFile,
        $reportWidth
    ) {
        $reporting       = new PHP_CodeSniffer_Reporting();
        $filesViolations = $phpcs->getFilesErrors();

        $changed_lines = $this->process_diff();
        foreach ( $filesViolations as $file => $issues ) {
            foreach ( array( 'warnings', 'errors' ) as $type ) {
                $count = 0;
                foreach ( $issues[$type] as $line => $issue ) {
                    if ( ! in_array( $line, $changed_lines[$file] ) ) {
                        unset( $filesViolations[$file][$type][$line] );
                    } else {
                        $count += count($issue);
                    }
                }
                $filesViolations[$file]['num' . ucfirst($type)] = $count;
                $count = 0;
            }
        }

        if (empty($reports) === true) {
            $reports['full'] = $reportFile;
        }

        $errors   = 0;
        $toScreen = false;

        foreach ($reports as $report => $output) {
            if ($output === null) {
                $output = $reportFile;
            }

            if ($reportFile === null) {
                $toScreen = true;
            }

            // We don't add errors here because the number of
            // errors reported by each report type will always be the
            // same, so we really just need 1 number.
            $errors = $reporting->printReport(
                $report,
                $filesViolations,
                $showSources,
                $output,
                $reportWidth
            );
        }

        // Only print PHP_Timer output if no reports were
        // printed to the screen so we don't put additional output
        // in something like an XML report. If we are printing to screen,
        // the report types would have already worked out who should
        // print the timer info.
        if ($toScreen === false
            && PHP_CODESNIFFER_INTERACTIVE === false
            && class_exists('PHP_Timer', false) === true
        ) {
            echo PHP_Timer::resourceUsage().PHP_EOL.PHP_EOL;
        }

        // They should all return the same value, so it
        // doesn't matter which return value we end up using.
        return $errors;

    }//end printErrorReport()

    function executeCommand( $command, $split = false ) {
        $handle = popen($command, 'r');
        if ($handle === false) {
            printf( 'Could not execute: %s' . PHP_EOL, $command );
            exit(1);
        }
        $contents = stream_get_contents($handle);
        fclose($handle);
        if ( $split ) {
            $lines = preg_split("/\v|\n/", $contents, -1, PREG_SPLIT_NO_EMPTY);
            return $lines;
        }
        return $contents;
    }


}//end class

$phpcs = new PHP_CodeSniffer_Patch_CLI();
$phpcs->checkRequirements();

$numErrors = $phpcs->process();
if ($numErrors !== 0) {
    exit(1);
}

?>
